import os, glob, sys, datetime

# This function adapts the config object to include full path information
include: "misc_snake.py"

# input files and folders
SAMPLEMAPPING = config['inputOutput']['sample_map']
INPUTDIR = config['inputOutput']['input_fastqs']
OUTDIR = config['inputOutput']['analysis_output_dir']
TMPDIR = config['inputOutput']['analysis_temp_dir']

# Check if the uses specified the proper input and output directories
if not 'INPUTDIR' in globals():
    print('You have to specify the root directory of the fastq files!')
    sys.exit(1)
if not 'OUTDIR' in globals():
    print('You have to specify the root directory where the results will be generated!')
    sys.exit(1)
if not 'TMPDIR' in globals():
    print('You have to specify the root directory where temporary files will be stored!')
    sys.exit(1)


# This is the default order in which the programs are executed
# Note: currently this is the default also specified in the rule files, so currently this is only for explanatory reasons displayed here
# If the user specified a different order in the project specific snake file, the user specified version is chosen.

# Start with Cellranger count for mapping reads
CELLRANGER_IN = INPUTDIR
CELLRANGER_OUT = OUTDIR + 'cellranger_run/'
CREATEHD5_IN = CELLRANGER_OUT
CREATEHD5_OUT = OUTDIR + 'rawCounts/'

FILTER_GENES_CELLS_IN = CREATEHD5_OUT
FILTER_GENES_CELLS_OUT = OUTDIR + 'filteredCounts/'
SCTRANSFORM_IN = FILTER_GENES_CELLS_OUT
SCTRANSFORM_OUT = OUTDIR + 'counts_corrected/'

PHENOGRAPH_IN = SCTRANSFORM_OUT
PHENOGRAPH_OUT = OUTDIR + 'clustering/'

PREPARE_CELLTYPING_IN = SCTRANSFORM_OUT
PREPARE_CELLTYPING_OUT = OUTDIR + 'prep_celltyping/'
CELLTYPECLASS_IN = PREPARE_CELLTYPING_OUT
CELLTYPECLASS_OUT = OUTDIR + 'celltype_classification/'

REMOVE_ATYPICAL_IN = CELLTYPECLASS_OUT
REMOVE_ATYPICAL_OUT = OUTDIR + 'atypical_removed/'
GSVA_IN = REMOVE_ATYPICAL_OUT
GSVA_OUT = OUTDIR + 'gsva/'
PLOTTING_IN = REMOVE_ATYPICAL_OUT
PLOTTING_OUT = OUTDIR + 'plotting/'

BOXPLOT_IN = REMOVE_ATYPICAL_OUT
BOXPLOT_OUT = PLOTTING_OUT

INTEGRATION_IN = REMOVE_ATYPICAL_OUT
INTEGRATION_OUT = PLOTTING_OUT

ASSEMBLE_NONMALIG_OUT = OUTDIR + 'non_malignant_reference/'
DIFF_EXP_IN = REMOVE_ATYPICAL_OUT
DIFF_EXP_OUT = OUTDIR + 'diff_exp/'
GENE_EXP_IN = REMOVE_ATYPICAL_OUT
GENE_EXP_OUT = OUTDIR + 'gene_exp/'

PROCESSDE_IN = DIFF_EXP_OUT
PROCESSDE_OUT = OUTDIR + 'genes_DE/'

DGIDB_IN = PROCESSDE_OUT
DGIDB_OUT = OUTDIR + 'dgidb/'
CLINICALTRIALS_OUT = OUTDIR + 'clinicalTrials/'
PERCENTAGE_IN = REMOVE_ATYPICAL_OUT
PERCENTAGE_OUT = OUTDIR + 'clustering/'
DRUGCOMBINATION = OUTDIR + 'drugCombination/'

# Include the rules
include: "scAmpi_basic_rules.py"

# This rule defines which files should be created
localrules: scAmpi_basic
rule scAmpi_basic:
    input:
        # Use cellranger for read mapping
        expand(CELLRANGER_OUT + '{sample}.features.tsv', sample = getSampleNames()),
        expand(PERCENTAGE_OUT + '{sample}.genes_cells_filtered.corrected.atypical_removed.clusters_cell_count_percent.txt', sample = getSampleNames()),
        expand(DIFF_EXP_OUT + '{sample}.genes_cells_filtered.corrected.atypical_removed.diffExp_success.txt', sample = getSampleNames()),
        expand(GENE_EXP_OUT + '{sample}.genes_cells_filtered.corrected.atypical_removed.gene_expression_per_cluster.tsv', sample = getSampleNames()),
        expand(CREATEHD5_OUT + '{sample}.h5.histogram_library_sizes.png', sample = getSampleNames()),
        expand(FILTER_GENES_CELLS_OUT + '{sample}.genes_cells_filtered.h5.histogram_library_sizes.png', sample = getSampleNames()),
        expand(PLOTTING_OUT + '{sample}.genes_cells_filtered.corrected.atypical_removed.celltype_barplot.png', sample = getSampleNames()),
        expand(GSVA_OUT + '{sample}.genes_cells_filtered.corrected.atypical_removed.gsetscore_hm.png', sample = getSampleNames()),
    output:
        OUTDIR + 'complete_scAmpi_basic.txt'
    params:
        lsfoutfile = OUTDIR + 'complete_scAmpi_basic.lsfout.log',
        lsferrfile = OUTDIR + 'complete_scAmpi_basic.lsferr.log',
        mem = '1000',
        scratch = '1000',
        time = '1'
    benchmark:
        OUTDIR + 'complete_scAmpi_basic.txt.benchmark'
    shell:
        'date > {output}'
